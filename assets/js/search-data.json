{
  
    
        "post0": {
            "title": "(2주차) 9월9일",
            "content": "&#44053;&#51032;&#50689;&#49345; . . - (1/4) Path 설명 . - (2/4) 이미지 크롤링 . - (3/4) 모형학습 및 결과분석 . - (4/4) 테스트 . import . from fastai.data.all import * from fastai.vision.all import * . Path . - 기능: 현재폴더, 혹은 그 하위폴더들에 속한 파일의 목록을 볼 수 있다. . path=Path() # Path클래스에서 인스턴스생성 . (path/&#39;ghtop_images&#39;).ls() . (#2) [Path(&#39;ghtop_images/token.png&#39;),Path(&#39;ghtop_images/sparknb.gif&#39;)] . - Path(...)에서 ...에 무엇을 넣느냐에 따라 원하는 경로를 설정할 수 있다. . path=Path(&#39;/home&#39;) . path.ls() . (#1) [Path(&#39;/home/cgb4&#39;)] . - 폴더를 만들수 있다. . path=Path() . (path/&#39;asdf&#39;).mkdir() . (path/&#39;asdf&#39;).ls() . (#0) [] . - 이미 폴더가 존재할 때는 아래와 같이 에러가 발생 . (path/&#39;asdf&#39;).mkdir() . FileExistsError Traceback (most recent call last) /tmp/ipykernel_258436/283275367.py in &lt;module&gt; -&gt; 1 (path/&#39;asdf&#39;).mkdir() ~/anaconda3/envs/bda2021/lib/python3.8/pathlib.py in mkdir(self, mode, parents, exist_ok) 1286 self._raise_closed() 1287 try: -&gt; 1288 self._accessor.mkdir(self, mode) 1289 except FileNotFoundError: 1290 if not parents or self.parent == self: FileExistsError: [Errno 17] File exists: &#39;asdf&#39; . (path/&#39;asdf&#39;).mkdir(exist_ok=True) . - 생성한 폴더를 지우는 방법 . (path/&#39;asdf&#39;).rmdir() . &#51060;&#48120;&#51648; &#53356;&#47204;&#47553; . - 이미지 크롤링은 (1) 검색 (2) 이미지 주소를 찾음 (3) 해당주소로 이동하여 저장하는 과정을 반복하면 된다. . - 교재: 빙을 이용하여 이미지 크롤링 . 단점: 애져에 가입, 완전무료가 아님 (학생에게 1년간 무료) | . - 다른방법: 덕덕고를 이용한 이미지 크롤링 . ref: https://github.com/fastai/fastbook/blob/master/utils.py | . def search_images_ddg(key,max_n=200): &quot;&quot;&quot;Search for &#39;key&#39; with DuckDuckGo and return a unique urls of &#39;max_n&#39; images (Adopted from https://github.com/deepanprabhu/duckduckgo-images-api) &quot;&quot;&quot; url = &#39;https://duckduckgo.com/&#39; params = {&#39;q&#39;:key} res = requests.post(url,data=params) searchObj = re.search(r&#39;vqd=([ d-]+) &amp;&#39;,res.text) if not searchObj: print(&#39;Token Parsing Failed !&#39;); return requestUrl = url + &#39;i.js&#39; headers = {&#39;User-Agent&#39;: &#39;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:71.0) Gecko/20100101 Firefox/71.0&#39;} params = ((&#39;l&#39;,&#39;us-en&#39;),(&#39;o&#39;,&#39;json&#39;),(&#39;q&#39;,key),(&#39;vqd&#39;,searchObj.group(1)),(&#39;f&#39;,&#39;,,,&#39;),(&#39;p&#39;,&#39;1&#39;),(&#39;v7exp&#39;,&#39;a&#39;)) urls = [] while True: try: res = requests.get(requestUrl,headers=headers,params=params) data = json.loads(res.text) for obj in data[&#39;results&#39;]: urls.append(obj[&#39;image&#39;]) max_n = max_n - 1 if max_n &lt; 1: return L(set(urls)) # dedupe if &#39;next&#39; not in data: return L(set(urls)) requestUrl = url + data[&#39;next&#39;] except: pass . - search_images_ddg(검색어)를 이용하여 검색어에 해당하는 url을 얻는다. . search_images_ddg(&#39;hynn&#39;,max_n=5) . (#5) [&#39;https://yt3.ggpht.com/a/AGF-l7_1jF579BUaWHBEpY95iZAb0WI2SC4vykeo3A=s900-c-k-c0xffffffff-no-rj-mo&#39;,&#39;http://talkimg.imbc.com/TVianUpload/tvian/TViews/image/2020/03/21/GRMTjLNM9a88637203974033409433.jpg&#39;,&#39;https://images.genius.com/a37e8f087886e8a9f1f1d4d4d02aba44.960x960x1.jpg&#39;,&#39;https://www.nautiljon.com/images/people/01/59/hynn_99095.jpg?0&#39;,&#39;https://lastfm.freetls.fastly.net/i/u/770x0/f6744fc617da497938bf0560c82fe0d2.jpg#f6744fc617da497938bf0560c82fe0d2&#39;] . - download_images(저장하고싶은폴더위치, url의리스트)를 이용하여 url에 해당하는 이미지를 저장하고 싶은 폴더에 저장. . path=Path() . path.ls() . (#14) [Path(&#39;2021-09-06-cat2.jpeg&#39;),Path(&#39;2021-09-06-hani03.jpg&#39;),Path(&#39;2021-09-06-hani01.jpeg&#39;),Path(&#39;ghtop_images&#39;),Path(&#39;2021-09-07-(1주차) 9월7일.ipynb&#39;),Path(&#39;Untitled.ipynb&#39;),Path(&#39;2021-08-17-(A1) 깃허브와 fastpages를 이용하여 블로그 개설하기.ipynb&#39;),Path(&#39;.ipynb_checkpoints&#39;),Path(&#39;2021-09-02-(1주차) 9월2일.ipynb&#39;),Path(&#39;2021-09-06-cat1.png&#39;)...] . download_images(path,urls=search_images_ddg(&#39;hynn&#39;,max_n=5)) . 현재 working dir에 5개의 이미지가 저장된다. | . keywords = &#39;hynn&#39;, &#39;iu&#39; path=Path(&#39;singer&#39;) . if not path.exists(): # 현재폴더에 singer라는 폴더가 있는지 체크 path.mkdir() # 현재폴더에 singer라는 폴더가 만들어짐 for keyword in keywords: # keyword=&#39;hynn&#39;, keyword=&#39;iu&#39; 일때 아래내용을 반복 lastpath=path/keyword # ./singer/hynn or ./singer/iu lastpath.mkdir(exist_ok=True) # make ./singer/hynn or ./singer/iu urls=search_images_ddg(keyword) # &#39;hynn&#39; 검색어로 url들의 리스트를 얻음 download_images(lastpath,urls=urls) # 그 url에 해당하는 이미지들을 ./singer/hynn or ./singer/iu 에 저장 . Cleaning Data . - 탐색기로 파일들을 살펴보니 조금 이상한 확장자도 있음. . - 조금 이상해보이는 확장자도 열리기는 함. . PILImage.create(&#39;./singer/iu/00000006.jpg:large&#39;) . verify_images(get_image_files(path)) . (#4) [Path(&#39;singer/iu/00000041.jpg&#39;),Path(&#39;singer/iu/00000029.jpg&#39;),Path(&#39;singer/iu/00000125.jpg&#39;),Path(&#39;singer/hynn/00000077.png&#39;)] . - 위에 해당하는 이미지를 수동으로 지워줌. . - csv을 받았으면 df를 만들어야 하듯이, 이미지 파일들을 받았으면 dls를 만들어야 fastai가 지원하는 함수로 분석하기 좋다. . dls = ImageDataLoaders.from_folder( path, train=&#39;singer&#39;, valid_pct=0.2, item_tfms=Resize(224)) . dls.show_batch(max_n=16) . - 모형을 만들고 학습을 시키자. . learn=cnn_learner(dls,resnet34,metrics=error_rate) learn.fine_tune(7) . epoch train_loss valid_loss error_rate time . 0 | 1.069038 | 0.753938 | 0.264706 | 00:04 | . epoch train_loss valid_loss error_rate time . 0 | 0.638990 | 0.531955 | 0.220588 | 00:04 | . 1 | 0.498534 | 0.338006 | 0.147059 | 00:04 | . 2 | 0.392531 | 0.268666 | 0.132353 | 00:04 | . 3 | 0.313377 | 0.214198 | 0.102941 | 00:04 | . 4 | 0.262075 | 0.227022 | 0.088235 | 00:04 | . 5 | 0.216234 | 0.228273 | 0.088235 | 00:04 | . 6 | 0.192656 | 0.218852 | 0.088235 | 00:04 | . learn.show_results(max_n=16) . &#50724;&#45813;&#48516;&#49437; . interp = Interpretation.from_learner(learn) interp.plot_top_losses(16) . - 수동으로 특정 observation에 대한 예측결과를 확인하여 보자. . dls.train_ds . (#272) [(PILImage mode=RGB size=960x960, TensorCategory(1)),(PILImage mode=RGB size=540x793, TensorCategory(1)),(PILImage mode=RGB size=800x1200, TensorCategory(1)),(PILImage mode=RGB size=720x960, TensorCategory(1)),(PILImage mode=RGB size=500x500, TensorCategory(0)),(PILImage mode=RGB size=1418x2000, TensorCategory(1)),(PILImage mode=RGB size=1920x1280, TensorCategory(1)),(PILImage mode=RGB size=480x360, TensorCategory(0)),(PILImage mode=RGB size=630x1045, TensorCategory(0)),(PILImage mode=RGB size=799x1200, TensorCategory(1))...] . training set | . dls.train_ds[0] . (PILImage mode=RGB size=960x960, TensorCategory(1)) . dls.train_ds[0] 가 의미하는 것은 첫번쨰 observation을 의미함. 즉 $(x_1,y_1)$ | $x_1=$PILImage mode=RGB size=960x960 | $y_1=$TensorCategory(1) | . dls.train_ds[210][0] . $x_{211}$=위의 이미지 | . dls.train_ds[210][1] . TensorCategory(0) . $y_{211}=$TensorCategory(0) | . x210=dls.train_ds[210][0] . learn.predict(x210) . (&#39;hynn&#39;, tensor(0), tensor([0.8893, 0.1107])) . Test . path = Path() . if not (path/&#39;test&#39;).exists(): (path/&#39;test&#39;).mkdir() . urls=search_images_ddg(&#39;hynn 박혜원&#39;,max_n=20) download_images(path/&#39;test&#39;,urls=urls) testset=get_image_files(path/&#39;test&#39;) testset . (#20) [Path(&#39;test/00000010.jpg&#39;),Path(&#39;test/00000005.jpg&#39;),Path(&#39;test/00000013.jpg&#39;),Path(&#39;test/00000011.jpg&#39;),Path(&#39;test/00000003.jpg&#39;),Path(&#39;test/00000000.jpg&#39;),Path(&#39;test/00000015.png&#39;),Path(&#39;test/00000004.jpg&#39;),Path(&#39;test/00000012.jpg&#39;),Path(&#39;test/00000006.jpg&#39;)...] . for i in range(len(testset)): print(learn.predict(PILImage.create(testset[i]))) . (&#39;hynn&#39;, tensor(0), tensor([1.0000e+00, 1.5190e-06])) . (&#39;hynn&#39;, tensor(0), tensor([0.9516, 0.0484])) . (&#39;hynn&#39;, tensor(0), tensor([0.9904, 0.0096])) . (&#39;hynn&#39;, tensor(0), tensor([9.9952e-01, 4.7845e-04])) . (&#39;hynn&#39;, tensor(0), tensor([0.9990, 0.0010])) . (&#39;hynn&#39;, tensor(0), tensor([0.9983, 0.0017])) . (&#39;hynn&#39;, tensor(0), tensor([0.9923, 0.0077])) . (&#39;iu&#39;, tensor(1), tensor([0.1120, 0.8880])) . (&#39;hynn&#39;, tensor(0), tensor([0.9949, 0.0051])) . (&#39;hynn&#39;, tensor(0), tensor([0.9982, 0.0018])) . (&#39;hynn&#39;, tensor(0), tensor([0.9940, 0.0060])) . (&#39;hynn&#39;, tensor(0), tensor([1.0000e+00, 8.8760e-07])) . (&#39;hynn&#39;, tensor(0), tensor([0.9963, 0.0037])) . (&#39;hynn&#39;, tensor(0), tensor([9.9975e-01, 2.5230e-04])) . (&#39;hynn&#39;, tensor(0), tensor([0.7672, 0.2328])) . (&#39;hynn&#39;, tensor(0), tensor([9.9982e-01, 1.8401e-04])) . (&#39;hynn&#39;, tensor(0), tensor([1.0000e+00, 3.9835e-06])) . (&#39;hynn&#39;, tensor(0), tensor([1.0000e+00, 6.5406e-07])) . (&#39;hynn&#39;, tensor(0), tensor([0.9253, 0.0747])) . (&#39;iu&#39;, tensor(1), tensor([0.1957, 0.8043])) . 결과를 보니까 hynn이 많음 $ to$ 어느정도 맞추는것 같긴하다. | . PILImage.create(testset[7]) . 실제로는 박혜원인데 아이유로 예측한 사진 | . path = Path() . if not (path/&#39;test2&#39;).exists(): (path/&#39;test2&#39;).mkdir() . urls=search_images_ddg(&#39;iu 아이유&#39;,max_n=20) download_images(path/&#39;test2&#39;,urls=urls) testset=get_image_files(path/&#39;test2&#39;) testset . (#20) [Path(&#39;test2/00000010.jpg&#39;),Path(&#39;test2/00000005.jpg&#39;),Path(&#39;test2/00000013.jpg&#39;),Path(&#39;test2/00000011.jpg&#39;),Path(&#39;test2/00000003.jpg&#39;),Path(&#39;test2/00000000.jpg&#39;),Path(&#39;test2/00000004.jpg&#39;),Path(&#39;test2/00000016.jpg&#39;),Path(&#39;test2/00000009.jpeg&#39;),Path(&#39;test2/00000012.jpg&#39;)...] . for i in range(len(testset)): print(learn.predict(PILImage.create(testset[i]))) . (&#39;iu&#39;, tensor(1), tensor([0.0051, 0.9949])) . (&#39;iu&#39;, tensor(1), tensor([8.7392e-06, 9.9999e-01])) . (&#39;iu&#39;, tensor(1), tensor([0.0895, 0.9105])) . (&#39;iu&#39;, tensor(1), tensor([0.0011, 0.9989])) . (&#39;iu&#39;, tensor(1), tensor([1.0321e-05, 9.9999e-01])) . (&#39;iu&#39;, tensor(1), tensor([0.0211, 0.9789])) . (&#39;iu&#39;, tensor(1), tensor([4.9877e-05, 9.9995e-01])) . (&#39;iu&#39;, tensor(1), tensor([0.0031, 0.9969])) . (&#39;iu&#39;, tensor(1), tensor([0.0011, 0.9989])) . (&#39;iu&#39;, tensor(1), tensor([1.5381e-05, 9.9998e-01])) . (&#39;iu&#39;, tensor(1), tensor([7.1447e-05, 9.9993e-01])) . (&#39;iu&#39;, tensor(1), tensor([1.3296e-04, 9.9987e-01])) . (&#39;hynn&#39;, tensor(0), tensor([0.9982, 0.0018])) . (&#39;iu&#39;, tensor(1), tensor([2.5169e-05, 9.9997e-01])) . (&#39;iu&#39;, tensor(1), tensor([1.2726e-05, 9.9999e-01])) . (&#39;iu&#39;, tensor(1), tensor([7.9650e-05, 9.9992e-01])) . (&#39;iu&#39;, tensor(1), tensor([3.0283e-04, 9.9970e-01])) . (&#39;iu&#39;, tensor(1), tensor([6.8668e-05, 9.9993e-01])) . (&#39;iu&#39;, tensor(1), tensor([0.0034, 0.9966])) . (&#39;iu&#39;, tensor(1), tensor([0.0052, 0.9948])) . 결과를 보니 아이유 역시 잘 맞추는 듯 보인다. | . - 정확률이 아쉽긴 하지만 어느정도 유의미한 결과를 얻었다. . &#49689;&#51228; . - 원하는 검색어로 이미지를 모은 뒤 결과를 제출 .",
            "url": "https://seoyeonc.github.io/chch/2021/11/12/_09_09_(2%EC%A3%BC%EC%B0%A8)_9%EC%9B%949%EC%9D%BC.html",
            "relUrl": "/2021/11/12/_09_09_(2%E1%84%8C%E1%85%AE%E1%84%8E%E1%85%A1)_9%E1%84%8B%E1%85%AF%E1%86%AF9%E1%84%8B%E1%85%B5%E1%86%AF.html",
            "date": " • Nov 12, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://seoyeonc.github.io/chch/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://seoyeonc.github.io/chch/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://seoyeonc.github.io/chch/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}